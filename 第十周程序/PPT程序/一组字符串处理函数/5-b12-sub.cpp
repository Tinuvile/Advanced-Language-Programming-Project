/* 信16 2352495 张竹和 */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：求字符串str的长度
  输入参数：
  返 回 值：字符串长度
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int n = 0;
    for (n = 0;; n++) {
        if (str[n] == '\0')
            break;
        else
            continue;
    }
    return n; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2追加到s1后面，含\0
  输入参数：
  返 回 值：0
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int n = tj_strlen(s1);
    for (int i = 0;; i++) {
        if (s2[i] == '\0') {
            s1[n + i] = s2[i];
            break;
        }
        else {
            s1[n + i] = s2[i];
            continue;
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前len个字符追加到s1后面，并添加\0
  输入参数：
  返 回 值：0
  说    明：若len比s2的长度大，则追加整个s2即可，含\0
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int n = tj_strlen(s1);
    int i = 0, judge = 0;
    for (i; i < len; i++) {
        if (s2[i] == '\0') {
            s1[n + i] = s2[i];
            judge = 1;
            break;
        }
        else {
            s1[n + i] = s2[i];
            continue;
        }
    }
    if (judge == 0) {
        s1[n + i] = '\0';
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2复制到s1中，覆盖s1中原内容，复制时包含\0
  输入参数：
  返 回 值：0
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int n = tj_strlen(s2);
    for (int i = 0; i <= n; i++) {
        s1[i] = s2[i];
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前len个字符复制到s1中，复制时不含\0
  输入参数：
  返 回 值：0
  说    明：若len比s2的长度大，复制s2长度即可，不含\0
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int n = tj_strlen(s2);
    if (len < n)
        n = len;
    for (int i = 0; i < n; i++) {
        s1[i] = s2[i];
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小，英文字母要区分大小写
  输入参数：
  返 回 值：相等为0，不相等则为第一个不相等字符的ASCII差值
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    int n1 = tj_strlen(s1);
    int n2 = tj_strlen(s2);
    int n;
    if (n1 >= n2)
        n = n1;
    else
        n = n2;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int t = 0;
    for (int i = 0; i < n; i++) {
        if ((int(s1[i])) != (int(s2[i]))) {
            t = (int(s1[i])) - (int(s2[i]));
            break;
        }
        else
            continue;
    }
    return t; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小，英文字母不分大小写
  输入参数：
  返 回 值：相等为0，不相等则为第一个不相等字符的ASCII差值
  说    明：若不相等处字符是不同的大小写字母，则统一转换为小写后比较
            若不相等处是大写字母和其他字符，则返回对应小写字母和其他字符的差值
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    int n1 = tj_strlen(s1);
    int n2 = tj_strlen(s2);
    int n;
    if (n1 >= n2)
        n = n1;
    else
        n = n2;
    int s11, s22;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int t = 0;
    for (int i = 0; i < n; i++) {
        s11 = int(s1[i]);
        s22 = int(s2[i]);
        if (s11 >= 'A' && s11 <= 'Z') {
            s11 = int(s1[i]) + 32;
        }
        if (s22 >= 'A' && s22 <= 'Z') {
            s22 = int(s2[i]) + 32;
        }
        if (s11 != s22) {
            t = s11 - s22;
            break;
        }
        else
            continue;
    }
    return t; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的前len个字符的大小，英文字母要区分大小写
  输入参数：
  返 回 值：相等为0，不等则为第一个不相等字符的ASCII差值
  说    明：若len大于s1/s2中长度短的串，则比较到短串的\0即结束
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    int n1 = tj_strlen(s1);
    int n2 = tj_strlen(s2);
    int n;
    if (n1 >= n2)
        n = n2;
    else
        n = n1;
    if (len <= n)
        n = len;
    else
        n = n + 1;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int t = 0;
    for (int i = 0; i < n; i++) {
        if ((int(s1[i])) != (int(s2[i]))) {
            t = (int(s1[i])) - (int(s2[i]));
            break;
        }
        else
            continue;
    }
    return t; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小，英文字母不分大小写
  输入参数：
  返 回 值：相等为0，不等则为第一个不相等字符的ASCII差值
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    int n1 = tj_strlen(s1);
    int n2 = tj_strlen(s2);
    int n;
    if (n1 >= n2)
        n = n2;
    else
        n = n1;
    if (len <= n)
        n = len;
    else
        n = n + 1;
    int s11, s22;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int t = 0;
    for (int i = 0; i < n; i++) {
        s11 = int(s1[i]);
        s22 = int(s2[i]);
        if (s11 >= 'A' && s11 <= 'Z') {
            s11 = int(s1[i]) + 32;
        }
        if (s22 >= 'A' && s22 <= 'Z') {
            s22 = int(s2[i]) + 32;
        }
        if (s11 != s22) {
            t = s11 - s22;
            break;
        }
        else
            continue;
    }
    return t; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串str中所有小写字母均转为大写，其他字符不变，转换后放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    int n = tj_strlen(str);
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0; i < n; i++) {
        if ((str[i] >= 'a') && (str[i] <= 'z')) {
            str[i] = char(int(str[i]) - 32);
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串str中所有大写字母均转为小写，其他字符不变，转换后放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    int n = tj_strlen(str);
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0; i < n; i++) {
        if ((str[i] >= 'A') && (str[i] <= 'Z')) {
            str[i] = char(int(str[i]) + 32);
        }
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch第一次出现的位置，顺序是从左到右
  输入参数：
  返 回 值：找到则返回1~n(位置从1开始)，未找到则返回0
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    int n = tj_strlen(str);
    int judge = 0;
    int i = 0;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (i; i < n; i++) {
        if (str[i] == ch) {
            judge = i + 1;
            break;
        }
    }
    return judge; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串中寻找字符串substr第一次出现的位置，顺序是从左到右
  输入参数：
  返 回 值：找到则返回1~n(位置从1开始)，未找到则返回0
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    int n = tj_strlen(str);
    int m = tj_strlen(substr);
    int judge = 0;
    int i = 0;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0; i <= n - m; i++) {
        int found = 1;
        for (int j = 0; j < m; j++) {
            if (str[i + j] != substr[j]) {
                found = 0;
                break;
            }
        }
        if (found) {
            judge = i + 1;
            break;
        }
    }
    return judge; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch第一次出现的位置，顺序是从右到左
  输入参数：
  返 回 值：找到则返回1~n(位置从1开始)，未找到则返回0
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    int n = tj_strlen(str);
    int judge = 0;
    int i = n - 1;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (i; i >= 0; i--) {
        if (str[i] == ch) {
            judge = i + 1;
            break;
        }
    }
    return judge; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串中寻找字符串substr第一次出现的位置，顺序是从右到左
  输入参数：
  返 回 值：找到则返回1~n(位置从1开始)，未找到则返回0
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    int n = tj_strlen(str);
    int m = tj_strlen(substr);
    int judge = 0;
    int i = 0;
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = n - m; i >= 0; i--) {
        int found = 1;
        for (int j = 0; j < m; j++) {
            if (str[i + j] != substr[j]) {
                found = 0;
                break;
            }
        }
        if (found) {
            judge = i + 1;
            break;
        }
    }
    return judge; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：字符串反转，放入原串中
  输入参数：
  返 回 值：0
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    int n = tj_strlen(str);
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    for (int i = 0; i < n / 2; i++) {
        char temp = str[i];
        str[i] = str[n - i - 1];
        str[n - i - 1] = temp;
    }
    return 0; //return值可根据需要修改
}
